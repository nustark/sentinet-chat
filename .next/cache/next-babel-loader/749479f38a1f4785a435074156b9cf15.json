{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nimport ChatMessage from './ChatMessage';\nconst SAD_EMOJI = [55357, 56864];\nconst HAPPY_EMOJI = [55357, 56832];\nconst NEUTRAL_EMOJI = [55357, 56848];\n\nclass Chat extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      chats: []\n    });\n\n    _defineProperty(this, \"handleKeyUp\", evt => {\n      const value = evt.target.value;\n\n      if (evt.keyCode === 13 && !evt.shiftKey) {\n        const {\n          activeUser: user\n        } = this.props;\n        const chat = {\n          user,\n          message: value,\n          timestamp: +new Date()\n        };\n        evt.target.value = '';\n        axios.post('/message', chat);\n      }\n    });\n  }\n\n  componentDidMount() {\n    // Setup pusher connection\n    this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    }); // Setup channel subscription\n\n    this.channel = this.pusher.subscribe('chat-room'); // Bind to new-message event and update state when it's triggered\n\n    this.channel.bind('new-message', ({\n      chat = null\n    }) => {\n      const {\n        chats\n      } = this.state;\n      chat && chats.push(chat);\n      this.setState({\n        chats\n      });\n    }); // Bind to connected event and fetch messages from history and update state\n\n    this.pusher.connection.bind('connected', () => {\n      axios.post('/messages').then(response => {\n        const chats = response.data.messages;\n        this.setState({\n          chats\n        });\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.pusher.disconnect();\n  }\n\n  render() {\n    return this.props.activeUser && __jsx(Fragment, null, __jsx(\"div\", {\n      className: \"border-bottom border-gray w-100 d-flex align-items-center bg-white\",\n      style: {\n        height: 90\n      }\n    }, __jsx(\"h2\", {\n      className: \"text-dark mb-0 mx-4 px-2\"\n    }, this.props.activeUser)), __jsx(\"div\", {\n      className: \"border-top border-gray w-100 px-4 d-flex align-items-center bg-light\",\n      style: {\n        minHeight: 90\n      }\n    }, __jsx(\"textarea\", {\n      className: \"form-control px-3 py-2\",\n      onKeyUp: this.handleKeyUp,\n      placeholder: \"Enter a chat message\",\n      style: {\n        resize: 'none'\n      }\n    })));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/thurman/cs/react/chat-sentiment/components/Chat.js"],"names":["React","Component","Fragment","axios","Pusher","ChatMessage","SAD_EMOJI","HAPPY_EMOJI","NEUTRAL_EMOJI","Chat","chats","evt","value","target","keyCode","shiftKey","activeUser","user","props","chat","message","timestamp","Date","post","componentDidMount","pusher","process","env","PUSHER_APP_KEY","cluster","PUSHER_APP_CLUSTER","encrypted","channel","subscribe","bind","state","push","setState","connection","then","response","data","messages","componentWillUnmount","disconnect","render","height","minHeight","handleKeyUp","resize"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nimport ChatMessage from './ChatMessage';\n\nconst SAD_EMOJI = [55357, 56864];\nconst HAPPY_EMOJI = [55357, 56832];\nconst NEUTRAL_EMOJI = [55357, 56848]\n\nclass Chat extends Component {\n    state = { \n        chats: []\n    }\n    \n    componentDidMount() {\n        // Setup pusher connection\n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n            cluster: process.env.PUSHER_APP_CLUSTER,\n            encrypted: true\n        });\n        \n        // Setup channel subscription\n        this.channel = this.pusher.subscribe('chat-room');\n        \n        // Bind to new-message event and update state when it's triggered\n        this.channel.bind('new-message', ({ chat = null }) => {\n            const { chats } = this.state;\n            chat && chats.push(chat);\n            this.setState({ chats });\n        });\n        \n        // Bind to connected event and fetch messages from history and update state\n        this.pusher.connection.bind('connected', () => {\n            axios.post('/messages')\n            .then(response => {\n                const chats = response.data.messages;\n                this.setState({ chats });\n            });\n        });\n    \n    }\n    \n    componentWillUnmount() {\n        this.pusher.disconnect();\n    }\n\n    handleKeyUp = evt => {\n        const value = evt.target.value;\n        \n        if (evt.keyCode === 13 && !evt.shiftKey) {\n            const { activeUser: user } = this.props;\n            const chat = { user, message: value, timestamp: + new Date };\n            \n            evt.target.value = '';\n            axios.post('/message', chat);\n        }\n    }\n\n    render() {\n        return (\n            this.props.activeUser && <Fragment>\n                <div className=\"border-bottom border-gray w-100 d-flex align-items-center bg-white\" style={{ height: 90 }}>\n                    <h2 className=\"text-dark mb-0 mx-4 px-2\">{this.props.activeUser}</h2>\n                </div>\n                \n                <div className=\"border-top border-gray w-100 px-4 d-flex align-items-center bg-light\" style={{ minHeight: 90 }}>\n                    <textarea className=\"form-control px-3 py-2\" onKeyUp={this.handleKeyUp} placeholder=\"Enter a chat message\" style={{ resize: 'none' }}></textarea>\n                </div>\n        </Fragment> \n        )\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}